Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
)
✅ Advanced Audio Analyzer initialized successfully
🚀 Starting ADVANCED 8-bit Music Analyzer API...
🎛️ Features: Demucs source separation + lead stem selection
   Advanced analyzer loaded: AdvancedAudioAnalyzer
   Demucs model: BagOfModels
   Supported frequencies: 24
   Pentatonic frequencies: 13
   Supported formats: ogg, flac, mp3, wav, m4a, aac
   Max file size: 16MB

Available endpoints:
  POST /analyze - Advanced audio analysis with Demucs
  GET /info - Service information
  GET /progress - Progress tracking info
  GET /health - Health check

Starting server on http://localhost:5001
 * Serving Flask app 'advanced_api'
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5001
 * Running on http://172.18.199.126:5001
Press CTRL+C to quit
 * Restarting with stat
Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
) * Debugger is active!
 * Debugger PIN: 129-088-411
127.0.0.1 - - [09/Jul/2025 22:16:15] "GET /health HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:16:21] "GET /debug/jobs HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:17:54] "POST /analyze HTTP/1.1" 200 -
Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:17:55] "GET /progress/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -

✅ Advanced Audio Analyzer initialized successfully
🚀 Starting ADVANCED 8-bit Music Analyzer API...
🎛️ Features: Demucs source separation + lead stem selection
   Advanced analyzer loaded: AdvancedAudioAnalyzer
   Demucs model: BagOfModels
   Supported frequencies: 24
   Pentatonic frequencies: 13
   Supported formats: wav, aac, mp3, flac, m4a, ogg
   Max file size: 16MB

Available endpoints:
  POST /analyze - Advanced audio analysis with Demucs
  GET /info - Service information
  GET /progress - Progress tracking info
  GET /health - Health check

Starting server on http://localhost:5001
🎵 Creating fresh analyzer instance for job: 59913ea8-110e-428a-b2df-28fbbcfc2e7c
Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
)
🎵 Starting advanced analysis for: 1-24. Get Fanfare (Spirit Orb-Rare Item).mp3 (job: 59913ea8-110e-428a-b2df-28fbbcfc2e7c)
🎵 Starting advanced audio analysis of: /tmp/tmp431ty15v.mp3
🎼 BPM hint: 120

Overall Progress:   0%|          | 0/7 [00:00<?]🔊 Loading audio file:   0%|          | 0/7 [00:00<?]🔊 Loading audio file:  14%|█▍        | 1/7 [00:00<00:02]🎛️ Separating audio stems:  14%|█▍        | 1/7 [00:00<00:02]Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:17:58] "GET /progress/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -
Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:18:01] "GET /progress/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -
Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:18:04] "GET /progress/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -
🎛️ Separating audio stems:  29%|██▊       | 2/7 [00:10<00:30]🎯 Selecting lead stem:  29%|██▊       | 2/7 [00:10<00:30]   🎼 Detecting pitch and notes:  43%|████▎     | 3/7 [00:10<00:24]🎼 Detecting pitch and notes:  57%|█████▋    | 4/7 [00:13<00:09]🥁 Tracking rhythm and tempo:  57%|█████▋    | 4/7 [00:13<00:09]Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:18:09] "GET /progress/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -
🥁 Tracking rhythm and tempo:  71%|███████▏  | 5/7 [00:14<00:05]🎹 Extracting and quantizing notes:  71%|███████▏  | 5/7 [00:14<00:05][PROGRESS] Stage 1: 🔊 Loading audio file | File: /tmp/tmp431ty15v.mp3
[PROGRESS] Stage 1: ✅ Audio loaded | Shape: (2, 326340), SR: 44100Hz, Duration: 7.40s
✅ Loaded audio: (2, 326340) at 44100 Hz (7.40 seconds)
[PROGRESS] Stage 2: 🎛️ Separating audio stems | Initializing Demucs...
[PROGRESS] Stage 2: 🎛️ Running Demucs separation | Processing 7.4s of audio...
[PROGRESS] Stage 2: ✅ Stems separated | Energy levels: {'drums': np.float32(0.011944175), 'bass': np.float32(0.0047219135), 'other': np.float32(0.951), 'vocals': np.float32(0.002293007)}
✅ Separated into 4 stems
[PROGRESS] Stage 3: 🎯 Selecting lead stem | Analyzing stem characteristics...
Analyzing stems to find lead track...
  drums: band_energy=0.023229, sc_var=681396.31, score=15827.825622
  bass: band_energy=0.004846, sc_var=812832.18, score=3939.390959
  other: band_energy=1.450593, sc_var=12014181.64, score=17427689.155855
  vocals: band_energy=0.004762, sc_var=1208692.02, score=5755.197517
Selected stem with highest score: 17427689.155855
Stem scores: {'drums': np.float64(15827.825621615366), 'bass': np.float64(3939.390958826528), 'other': np.float64(17427689.15585534), 'vocals': np.float64(5755.19751697505)}
[PROGRESS] Stage 3: ✅ Lead stem selected | Lead stem energy: 0.601894
✅ Lead stem selected
[PROGRESS] Stage 4: 🎼 Detecting pitch and notes | Running PYIN analysis...
[PROGRESS] Stage 4: ✅ Pitch detection complete | Frames: 2550, Freq>0: 813, Confident: 2370
✅ Extracted 2550 fundamental frequency frames
[PROGRESS] Stage 5: 🥁 Tracking rhythm and tempo | Analyzing beats...
[PROGRESS] Stage 5: ✅ Tempo: 139.7 BPM | Source: detected, Min frames: 18
✅ Tempo: 139.7 BPM (detected)
   Min note duration: 0.054s (18 frames)
[PROGRESS] Stage 6: 🎹 Extracting and quantizing notes | Processing 2550 frames...

Processing frames:   0%|          | 0/2550 [00:00<?, ?frame/s][A
Processing frames:  61%|██████▏   | 1567/2550 [00:00<00:00, 15665.79frame/s][A
                                                                            [A🎹 Extracting and quantizing notes:  86%|████████▌ | 6/7 [00:14<00:01]🔧 Post-processing and cleanup:  86%|████████▌ | 6/7 [00:14<00:01]    🔧 Finalizing results...: 100%|██████████| 7/7 [00:14<00:00]      ✅ Analysis complete!: 100%|██████████| 7/7 [00:14<00:00]   ✅ Analysis complete!: 100%|██████████| 7/7 [00:14<00:00]
127.0.0.1 - - [09/Jul/2025 22:18:40] "GET /health HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:18:46] "GET /debug/jobs HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:18:51] "GET /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:18:57] "GET /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:19:03] "GET /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:19:11] "GET /progress/59913ea8-110e-428a-b2df-28fbbcfc2e7c HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:19:47] "POST /analyze HTTP/1.1" 200 -
Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:19:47] "GET /progress/01ab47e4-f0fb-480c-9908-9c7383a52378 HTTP/1.1" 200 -
[PROGRESS] Stage 6: 🎹 Processing frames (2000/2550) | Voiced: 813, Errors: 0
[PROGRESS] Stage 6: ✅ Extracted 12 notes | Raw: 12, Freq>0: 813, Voiced: 813, Errors: 0, Memory: 2479.3MB
✅ Extracted 12 raw notes
   Debug: 813 frames with frequency > 0
   Debug: 813 frames above confidence threshold
   Debug: min_frames = 18, min_duration = 0.054s
[PROGRESS] Stage 7: 🔧 Post-processing and cleanup | Starting with 12 notes...
[PROGRESS] Stage 6: 🔧 Finalizing results | Initial: 12 → Merged: 6 → Final: 6
✅ Final sequence: 6 notes after post-processing
[PROGRESS] Stage 7: ✅ Analysis complete! 6 notes | Initial: 12 → Merged: 6 → Final: 6

🔬 [DEBUG] Analysis completed, result type: <class 'dict'>
🔬 [DEBUG] Result keys: ['version', 'sequence', 'created', 'source', 'analysis_id', 'original_filename', 'bpm_hint', 'detected_tempo', 'tempo_source', 'sample_rate', 'duration', 'note_count', 'analysis_params']
🔬 [DEBUG] About to update job 59913ea8-110e-428a-b2df-28fbbcfc2e7c status to completed
🔬 [DEBUG] Acquired lock, updating job 59913ea8-110e-428a-b2df-28fbbcfc2e7c status
🔬 [DEBUG] Job 59913ea8-110e-428a-b2df-28fbbcfc2e7c status set to: completed
✅ Advanced analysis complete: 6 notes detected
   Tempo: 139.7 BPM (detected)
   Duration: 7.4s
🔬 [DEBUG] Thread cleanup completed for job 59913ea8-110e-428a-b2df-28fbbcfc2e7c
🔬 [DEBUG] /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c: status=completed, has_result=True
🔬 [DEBUG] /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c: Returning completed result with 6 notes
🔬 [DEBUG] /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c: status=completed, has_result=True
🔬 [DEBUG] /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c: Returning completed result with 6 notes
🔬 [DEBUG] /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c: status=completed, has_result=True
🔬 [DEBUG] /result/59913ea8-110e-428a-b2df-28fbbcfc2e7c: Returning completed result with 6 notes
🎵 Creating fresh analyzer instance for job: 01ab47e4-f0fb-480c-9908-9c7383a52378
Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
)
🎵 Starting advanced analysis for: 1-24. Get Fanfare (Spirit Orb-Rare Item).mp3 (job: 01ab47e4-f0fb-480c-9908-9c7383a52378)
🎵 Starting advanced audio analysis of: /tmp/tmp31a8jmgh.mp3
🎼 BPM hint: 120

Overall Progress:   0%|          | 0/7 [00:00<?]🔊 Loading audio file:   0%|          | 0/7 [00:00<?]🎛️ Separating audio stems:  14%|█▍        | 1/7 [00:00<00:00]Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:19:50] "GET /progress/01ab47e4-f0fb-480c-9908-9c7383a52378 HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:19:56] "POST /analyze HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:19:56] "GET /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 202 -
Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:19:56] "GET /progress/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 200 -
🎛️ Separating audio stems:  29%|██▊       | 2/7 [00:09<00:23]🎯 Selecting lead stem:  29%|██▊       | 2/7 [00:09<00:23]   🎼 Detecting pitch and notes:  43%|████▎     | 3/7 [00:09<00:18][PROGRESS] Stage 1: 🔊 Loading audio file | File: /tmp/tmp31a8jmgh.mp3
[PROGRESS] Stage 1: ✅ Audio loaded | Shape: (2, 326340), SR: 44100Hz, Duration: 7.40s
✅ Loaded audio: (2, 326340) at 44100 Hz (7.40 seconds)
[PROGRESS] Stage 2: 🎛️ Separating audio stems | Initializing Demucs...
[PROGRESS] Stage 2: 🎛️ Running Demucs separation | Processing 7.4s of audio...
🎵 Creating fresh analyzer instance for job: a53c1842-f989-48ea-ae0e-2f7e365f13d3
Loading Demucs model for source separation...
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: status=running, has_result=False
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: Returning 202, status=running
[PROGRESS] Stage 2: ✅ Stems separated | Energy levels: {'drums': np.float32(0.01200968), 'bass': np.float32(0.0047062384), 'other': np.float32(0.95427984), 'vocals': np.float32(0.0025458944)}
✅ Separated into 4 stems
[PROGRESS] Stage 3: 🎯 Selecting lead stem | Analyzing stem characteristics...
Analyzing stems to find lead track...
  drums: band_energy=0.023839, sc_var=692201.18, score=16501.591910
  bass: band_energy=0.005143, sc_var=786077.60, score=4042.934219
  other: band_energy=1.451364, sc_var=11789621.84, score=17111033.182365
  vocals: band_energy=0.004774, sc_var=1180440.10, score=5634.913729
Selected stem with highest score: 17111033.182365
Stem scores: {'drums': np.float64(16501.59190979641), 'bass': np.float64(4042.9342185320224), 'other': np.float64(17111033.182365496), 'vocals': np.float64(5634.913729157292)}
[PROGRESS] Stage 3: ✅ Lead stem selected | Lead stem energy: 0.601540
✅ Lead stem selected
[PROGRESS] Stage 4: 🎼 Detecting pitch and notes | Running PYIN analysis...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
)
🎵 Starting advanced analysis for: 1-24. Get Fanfare (Spirit Orb-Rare Item).mp3 (job: a53c1842-f989-48ea-ae0e-2f7e365f13d3)
🎵 Starting advanced audio analysis of: /tmp/tmp07wj66_c.mp3
🎼 BPM hint: 120


Overall Progress:   0%|          | 0/7 [00:00<?][A
🔊 Loading audio file:   0%|          | 0/7 [00:00<?][A
🎛️ Separating audio stems:  14%|█▍        | 1/7 [00:00<00:00][A127.0.0.1 - - [09/Jul/2025 22:19:57] "GET /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 202 -
127.0.0.1 - - [09/Jul/2025 22:20:00] "GET /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 202 -
🎼 Detecting pitch and notes:  57%|█████▋    | 4/7 [00:12<00:08]🥁 Tracking rhythm and tempo:  57%|█████▋    | 4/7 [00:12<00:08]Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:20:00] "GET /progress/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 200 -
🥁 Tracking rhythm and tempo:  71%|███████▏  | 5/7 [00:13<00:04]🎹 Extracting and quantizing notes:  71%|███████▏  | 5/7 [00:13<00:04][PROGRESS] Stage 1: 🔊 Loading audio file | File: /tmp/tmp07wj66_c.mp3
[PROGRESS] Stage 1: ✅ Audio loaded | Shape: (2, 326340), SR: 44100Hz, Duration: 7.40s
✅ Loaded audio: (2, 326340) at 44100 Hz (7.40 seconds)
[PROGRESS] Stage 2: 🎛️ Separating audio stems | Initializing Demucs...
[PROGRESS] Stage 2: 🎛️ Running Demucs separation | Processing 7.4s of audio...
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: status=running, has_result=False
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: Returning 202, status=running
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: status=running, has_result=False
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: Returning 202, status=running
[PROGRESS] Stage 4: ✅ Pitch detection complete | Frames: 2550, Freq>0: 855, Confident: 2441
✅ Extracted 2550 fundamental frequency frames
[PROGRESS] Stage 5: 🥁 Tracking rhythm and tempo | Analyzing beats...
[PROGRESS] Stage 5: ✅ Tempo: 139.7 BPM | Source: detected, Min frames: 18
✅ Tempo: 139.7 BPM (detected)
   Min note duration: 0.054s (18 frames)
[PROGRESS] Stage 6: 🎹 Extracting and quantizing notes | Processing 2550 frames...


Processing frames:   0%|          | 0/2550 [00:00<?, ?frame/s][A[A

Processing frames:  60%|█████▉    | 1528/2550 [00:00<00:00, 15277.36frame/s][A[A

                                                                            [A[A🎹 Extracting and quantizing notes:  86%|████████▌ | 6/7 [00:13<00:01]🔧 Post-processing and cleanup:  86%|████████▌ | 6/7 [00:13<00:01]    🔧 Finalizing results...: 100%|██████████| 7/7 [00:13<00:00]      ✅ Analysis complete!: 100%|██████████| 7/7 [00:13<00:00]   ✅ Analysis complete!: 100%|██████████| 7/7 [00:13<00:00]
127.0.0.1 - - [09/Jul/2025 22:20:02] "GET /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 202 -
127.0.0.1 - - [09/Jul/2025 22:20:03] "GET /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 202 -
Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:20:04] "GET /progress/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 200 -
Debugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:20:07] "GET /progress/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 200 -

🎛️ Separating audio stems:  29%|██▊       | 2/7 [00:11<00:29][A
🎯 Selecting lead stem:  29%|██▊       | 2/7 [00:11<00:29]   [A
🎼 Detecting pitch and notes:  43%|████▎     | 3/7 [00:11<00:23][A
🎼 Detecting pitch and notes:  57%|█████▋    | 4/7 [00:14<00:09][A
🥁 Tracking rhythm and tempo:  57%|█████▋    | 4/7 [00:14<00:09][ADebugging middleware caught exception in streamed response at a point where response headers were already sent.
Traceback (most recent call last):
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wsgi.py", line 256, in __next__
    return self._next()
           ^^^^^^^^^^^^
  File "/home/tong/.local/lib/python3.12/site-packages/werkzeug/wrappers/response.py", line 32, in _iter_encoded
    for item in iterable:
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 269, in generate_progress
    yield f"data: {json.dumps(progress_data)}\n\n"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/json/encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Thread is not JSON serializable
127.0.0.1 - - [09/Jul/2025 22:20:12] "GET /progress/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 200 -

🥁 Tracking rhythm and tempo:  71%|███████▏  | 5/7 [00:15<00:04][A
🎹 Extracting and quantizing notes:  71%|███████▏  | 5/7 [00:15<00:04][A[PROGRESS] Stage 6: 🎹 Processing frames (2000/2550) | Voiced: 855, Errors: 0
[PROGRESS] Stage 6: ✅ Extracted 13 notes | Raw: 13, Freq>0: 855, Voiced: 855, Errors: 0, Memory: 4369.5MB
✅ Extracted 13 raw notes
   Debug: 855 frames with frequency > 0
   Debug: 855 frames above confidence threshold
   Debug: min_frames = 18, min_duration = 0.054s
[PROGRESS] Stage 7: 🔧 Post-processing and cleanup | Starting with 13 notes...
[PROGRESS] Stage 6: 🔧 Finalizing results | Initial: 13 → Merged: 6 → Final: 6
✅ Final sequence: 6 notes after post-processing
[PROGRESS] Stage 7: ✅ Analysis complete! 6 notes | Initial: 13 → Merged: 6 → Final: 6

🔬 [DEBUG] Analysis completed, result type: <class 'dict'>
🔬 [DEBUG] Result keys: ['version', 'sequence', 'created', 'source', 'analysis_id', 'original_filename', 'bpm_hint', 'detected_tempo', 'tempo_source', 'sample_rate', 'duration', 'note_count', 'analysis_params']
🔬 [DEBUG] About to update job 01ab47e4-f0fb-480c-9908-9c7383a52378 status to completed
🔬 [DEBUG] Acquired lock, updating job 01ab47e4-f0fb-480c-9908-9c7383a52378 status
🔬 [DEBUG] Job 01ab47e4-f0fb-480c-9908-9c7383a52378 status set to: completed
✅ Advanced analysis complete: 6 notes detected
   Tempo: 139.7 BPM (detected)
   Duration: 7.4s
🔬 [DEBUG] Thread cleanup completed for job 01ab47e4-f0fb-480c-9908-9c7383a52378
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: status=running, has_result=False
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: Returning 202, status=running
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: status=running, has_result=False
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: Returning 202, status=running
[PROGRESS] Stage 2: ✅ Stems separated | Energy levels: {'drums': np.float32(0.0114445165), 'bass': np.float32(0.0047341436), 'other': np.float32(0.9533468), 'vocals': np.float32(0.0019852682)}
✅ Separated into 4 stems
[PROGRESS] Stage 3: 🎯 Selecting lead stem | Analyzing stem characteristics...
Analyzing stems to find lead track...
  drums: band_energy=0.022688, sc_var=735234.60, score=16681.361173
  bass: band_energy=0.004431, sc_var=845473.87, score=3746.149419
  other: band_energy=1.452963, sc_var=11585600.78, score=16833451.969693
  vocals: band_energy=0.005124, sc_var=1272948.66, score=6522.715669
Selected stem with highest score: 16833451.969693
Stem scores: {'drums': np.float64(16681.36117340786), 'bass': np.float64(3746.1494186779546), 'other': np.float64(16833451.969692525), 'vocals': np.float64(6522.715669245316)}
[PROGRESS] Stage 3: ✅ Lead stem selected | Lead stem energy: 0.602954
✅ Lead stem selected
[PROGRESS] Stage 4: 🎼 Detecting pitch and notes | Running PYIN analysis...
[PROGRESS] Stage 4: ✅ Pitch detection complete | Frames: 2550, Freq>0: 971, Confident: 2434
✅ Extracted 2550 fundamental frequency frames
[PROGRESS] Stage 5: 🥁 Tracking rhythm and tempo | Analyzing beats...
[PROGRESS] Stage 5: ✅ Tempo: 139.7 BPM | Source: detected, Min frames: 18
✅ Tempo: 139.7 BPM (detected)
   Min note duration: 0.054s (18 frames)
[PROGRESS] Stage 6: 🎹 Extracting and quantizing notes | Processing 2550 frames...
Processing frames:   0%|          | 0/2550 [00:00<?, ?frame/s]Processing frames:  60%|██████    | 1534/2550 [00:00<00:00, 15325.91frame/s]                                                                            
🎹 Extracting and quantizing notes:  86%|████████▌ | 6/7 [00:15<00:01][A
🔧 Post-processing and cleanup:  86%|████████▌ | 6/7 [00:15<00:01]    [A
🔧 Finalizing results...: 100%|██████████| 7/7 [00:15<00:00]      [A
✅ Analysis complete!: 100%|██████████| 7/7 [00:15<00:00]   [A✅ Analysis complete!: 100%|██████████| 7/7 [00:15<00:00]
127.0.0.1 - - [09/Jul/2025 22:20:15] "GET /progress/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:21:06] "GET /debug/jobs HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 22:21:11] "GET /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 200 -
 * Detected change in '/home/tong/apps/8_bit_music/advanced_api.py', reloading
[PROGRESS] Stage 6: 🎹 Processing frames (2000/2550) | Voiced: 970, Errors: 0
[PROGRESS] Stage 6: ✅ Extracted 16 notes | Raw: 16, Freq>0: 971, Voiced: 970, Errors: 0, Memory: 4464.6MB
✅ Extracted 16 raw notes
   Debug: 971 frames with frequency > 0
   Debug: 970 frames above confidence threshold
   Debug: min_frames = 18, min_duration = 0.054s
[PROGRESS] Stage 7: 🔧 Post-processing and cleanup | Starting with 16 notes...
[PROGRESS] Stage 6: 🔧 Finalizing results | Initial: 16 → Merged: 6 → Final: 6
✅ Final sequence: 6 notes after post-processing
[PROGRESS] Stage 7: ✅ Analysis complete! 6 notes | Initial: 16 → Merged: 6 → Final: 6

🔬 [DEBUG] Analysis completed, result type: <class 'dict'>
🔬 [DEBUG] Result keys: ['version', 'sequence', 'created', 'source', 'analysis_id', 'original_filename', 'bpm_hint', 'detected_tempo', 'tempo_source', 'sample_rate', 'duration', 'note_count', 'analysis_params']
🔬 [DEBUG] About to update job a53c1842-f989-48ea-ae0e-2f7e365f13d3 status to completed
🔬 [DEBUG] Acquired lock, updating job a53c1842-f989-48ea-ae0e-2f7e365f13d3 status
🔬 [DEBUG] Job a53c1842-f989-48ea-ae0e-2f7e365f13d3 status set to: completed
✅ Advanced analysis complete: 6 notes detected
   Tempo: 139.7 BPM (detected)
   Duration: 7.4s
🔬 [DEBUG] Thread cleanup completed for job a53c1842-f989-48ea-ae0e-2f7e365f13d3
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: status=completed, has_result=True
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: Returning completed result with 6 notes
 * Restarting with stat
Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
) * Debugger is active!
 * Debugger PIN: 129-088-411
127.0.0.1 - - [09/Jul/2025 22:21:23] "GET /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 404 -
127.0.0.1 - - [09/Jul/2025 22:21:50] "GET /progress/a53c1842-f989-48ea-ae0e-2f7e365f13d3 HTTP/1.1" 200 -
 * Detected change in '/home/tong/apps/8_bit_music/advanced_api.py', reloading

✅ Advanced Audio Analyzer initialized successfully
🚀 Starting ADVANCED 8-bit Music Analyzer API...
🎛️ Features: Demucs source separation + lead stem selection
   Advanced analyzer loaded: AdvancedAudioAnalyzer
   Demucs model: BagOfModels
   Supported frequencies: 24
   Pentatonic frequencies: 13
   Supported formats: wav, aac, flac, ogg, m4a, mp3
   Max file size: 16MB

Available endpoints:
  POST /analyze - Advanced audio analysis with Demucs
  GET /info - Service information
  GET /progress - Progress tracking info
  GET /health - Health check

Starting server on http://localhost:5001
🔬 [DEBUG] /result/a53c1842-f989-48ea-ae0e-2f7e365f13d3: Job not found in progress_store
 * Restarting with stat
Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
) * Debugger is active!
 * Debugger PIN: 129-088-411
