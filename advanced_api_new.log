Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
)
✅ Advanced Audio Analyzer initialized successfully
🚀 Starting ADVANCED 8-bit Music Analyzer API...
🎛️ Features: Demucs source separation + lead stem selection
   Advanced analyzer loaded: AdvancedAudioAnalyzer
   Demucs model: BagOfModels
   Supported frequencies: 24
   Pentatonic frequencies: 13
   Supported formats: flac, m4a, aac, mp3, ogg, wav
   Max file size: 16MB

Available endpoints:
  POST /analyze - Advanced audio analysis with Demucs
  GET /info - Service information
  GET /progress - Progress tracking info
  GET /health - Health check

Starting server on http://localhost:5000
 * Serving Flask app 'advanced_api'
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://172.18.199.126:5000
Press CTRL+C to quit
 * Restarting with stat
Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
) * Debugger is active!
 * Debugger PIN: 129-088-411
127.0.0.1 - - [09/Jul/2025 20:49:46] "GET /health HTTP/1.1" 200 -
127.0.0.1 - - [09/Jul/2025 20:50:27] "GET /health HTTP/1.1" 200 -

✅ Advanced Audio Analyzer initialized successfully
🚀 Starting ADVANCED 8-bit Music Analyzer API...
🎛️ Features: Demucs source separation + lead stem selection
   Advanced analyzer loaded: AdvancedAudioAnalyzer
   Demucs model: BagOfModels
   Supported frequencies: 24
   Pentatonic frequencies: 13
   Supported formats: flac, aac, wav, m4a, mp3, ogg
   Max file size: 16MB

Available endpoints:
  POST /analyze - Advanced audio analysis with Demucs
  GET /info - Service information
  GET /progress - Progress tracking info
  GET /health - Health check

Starting server on http://localhost:5000
🎵 Starting advanced analysis for: test_mario.wav (job: 865fcc5b-bd01-47b3-9d65-ac5ed04bb41a)
🎵 Starting advanced audio analysis of: /tmp/tmp4rnmosdn.wav
🎼 BPM hint: 120

Overall Progress:   0%|          | 0/7 [00:00<?]🔊 Loading audio file:   0%|          | 0/7 [00:00<?]🔊 Loading audio file:  14%|█▍        | 1/7 [00:00<00:02]🎛️ Separating audio stems:  14%|█▍        | 1/7 [00:00<00:02]🎛️ Separating audio stems:  29%|██▊       | 2/7 [00:06<00:17]🎯 Selecting lead stem:  29%|██▊       | 2/7 [00:06<00:17]   🎼 Detecting pitch and notes:  43%|████▎     | 3/7 [00:06<00:14]🎼 Detecting pitch and notes:  57%|█████▋    | 4/7 [00:07<00:05]🥁 Tracking rhythm and tempo:  57%|█████▋    | 4/7 [00:07<00:05]🥁 Tracking rhythm and tempo:  71%|███████▏  | 5/7 [00:08<00:03]Traceback (most recent call last):
  File "/home/tong/apps/8_bit_music/advanced_audio_analyzer.py", line 298, in analyze_audio_file
    print(f"   Min note duration: {min_note_duration_sec:.3f}s ({min_frames} frames)")
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: unsupported format string passed to numpy.ndarray.__format__

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/tong/apps/8_bit_music/advanced_api.py", line 112, in analyze_audio
    result = analyzer.analyze_audio_file_with_progress(temp_path, bpm_hint=bpm_hint, job_id=job_id, progress_store=progress_store, progress_lock=progress_lock)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/tong/apps/8_bit_music/advanced_audio_analyzer.py", line 163, in analyze_audio_file_with_progress
    return self.analyze_audio_file(file_path, bpm_hint, True, job_id, progress_store, progress_lock)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/tong/apps/8_bit_music/advanced_audio_analyzer.py", line 463, in analyze_audio_file
    raise RuntimeError(f"Advanced audio analysis failed: {str(e)}") from e
RuntimeError: Advanced audio analysis failed: unsupported format string passed to numpy.ndarray.__format__
🥁 Tracking rhythm and tempo:  71%|███████▏  | 5/7 [00:08<00:03]
127.0.0.1 - - [09/Jul/2025 20:50:36] "POST /analyze HTTP/1.1" 500 -
 * Detected change in '/home/tong/apps/8_bit_music/advanced_audio_analyzer.py', reloading
✅ Loaded audio: (2, 198450) at 44100 Hz (4.50 seconds)
✅ Separated into 4 stems
Analyzing stems to find lead track...
  drums: band_energy=0.020792, sc_var=4385605.90, score=91186.416327
  other: band_energy=0.481433, sc_var=9744129.43, score=4691143.179078
Selected stem with highest score: 4691143.179078
Stem scores: {'drums': np.float64(91186.41632731177), 'bass': 0, 'other': np.float64(4691143.179077643), 'vocals': 0}
✅ Lead stem selected
✅ Extracted 1551 fundamental frequency frames
✅ Tempo: 120.2 BPM (detected)
Advanced audio analysis failed: unsupported format string passed to numpy.ndarray.__format__
❌ Advanced analysis failed: Advanced audio analysis failed: unsupported format string passed to numpy.ndarray.__format__
 * Restarting with stat
Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
) * Debugger is active!
 * Debugger PIN: 129-088-411
 * Detected change in '/home/tong/apps/8_bit_music/advanced_audio_analyzer.py', reloading

✅ Advanced Audio Analyzer initialized successfully
🚀 Starting ADVANCED 8-bit Music Analyzer API...
🎛️ Features: Demucs source separation + lead stem selection
   Advanced analyzer loaded: AdvancedAudioAnalyzer
   Demucs model: BagOfModels
   Supported frequencies: 24
   Pentatonic frequencies: 13
   Supported formats: mp3, wav, m4a, flac, aac, ogg
   Max file size: 16MB

Available endpoints:
  POST /analyze - Advanced audio analysis with Demucs
  GET /info - Service information
  GET /progress - Progress tracking info
  GET /health - Health check

Starting server on http://localhost:5000
 * Restarting with stat
Loading Demucs model for source separation...
Advanced Audio Analyzer initialized with Demucs BagOfModels(
  (models): ModuleList(
    (0-3): 4 x HTDemucs(
      (encoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
          (norm1): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (decoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose2d(48, 16, kernel_size=(8, 1), stride=(4, 1))
          (norm2): Identity()
          (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tencoder): ModuleList(
        (0): HEncLayer(
          (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HEncLayer(
          (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HEncLayer(
          (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HEncLayer(
          (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
          (norm1): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
          (norm2): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (tdecoder): ModuleList(
        (0): HDecLayer(
          (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 48, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 768, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (1): HDecLayer(
          (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 24, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 384, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (2): HDecLayer(
          (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 12, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 192, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
        (3): HDecLayer(
          (conv_tr): ConvTranspose1d(48, 8, kernel_size=(8,), stride=(4,))
          (norm2): Identity()
          (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
          (norm1): Identity()
          (dconv): DConv(
            (layers): ModuleList(
              (0): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
              (1): Sequential(
                (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
                (1): GroupNorm(1, 6, eps=1e-05, affine=True)
                (2): GELU(approximate='none')
                (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
                (4): GroupNorm(1, 96, eps=1e-05, affine=True)
                (5): GLU(dim=1)
                (6): LayerScale()
              )
            )
          )
        )
      )
      (freq_emb): ScaledEmbedding(
        (embedding): Embedding(512, 48)
      )
      (channel_upsampler): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (channel_upsampler_t): Conv1d(384, 512, kernel_size=(1,), stride=(1,))
      (channel_downsampler_t): Conv1d(512, 384, kernel_size=(1,), stride=(1,))
      (crosstransformer): CrossTransformerEncoder(
        (norm_in): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm_in_t): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
        (layers_t): ModuleList(
          (0): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (1): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (2): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
          (3): CrossTransformerEncoderLayer(
            (cross_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm3): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
          )
          (4): MyTransformerEncoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (linear1): Linear(in_features=512, out_features=2048, bias=True)
            (dropout): Dropout(p=0.02, inplace=False)
            (linear2): Linear(in_features=2048, out_features=512, bias=True)
            (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (dropout1): Dropout(p=0.02, inplace=False)
            (dropout2): Dropout(p=0.02, inplace=False)
            (norm_out): MyGroupNorm(1, 512, eps=1e-05, affine=True)
            (gamma_1): LayerScale()
            (gamma_2): LayerScale()
          )
        )
      )
    )
  )
) * Debugger is active!
 * Debugger PIN: 129-088-411
